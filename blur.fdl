
#define INS_IDLE 0
#define INS_START 1

ipblock my8051 {
	iptype "i8051system";
	ipparm "exec=blur.ihx";
	ipparm "verbose=1";
	ipparm "period=1";
}

ipblock my8051_ins(out data : ns(8)) {
	iptype "i8051systemsource";
	ipparm "core=my8051";
	ipparm "port=P0";
}

ipblock my8051_status(in data : ns(8)) {
	iptype "i8051systemsink";
	ipparm "core=my8051";
	ipparm "port=P1";
}

ipblock my8051_xram(in    idata    : ns(8);
                    out   odata    : ns(8);
                    in    address  : ns(8);
                    in    wr       : ns(8)) {
	iptype "i8051buffer";
	ipparm "core=my8051";
	ipparm "xbus=0x4000";
	ipparm "xrange=0x64"; // 100 locations at address 0x4000
}


dp blur {
	sig upins : ns(8);
	reg upstatus : ns(8);
	use my8051_ins (upins);
	use my8051_status (upstatus);
	
	sig ramadr, ramidata, ramodata : ns(8);
	sig wr : ns(1);
	use my8051_xram(ramidata, ramodata, ramadr, wr);
	
	reg ramcnt : ns(8);
	sig ramcnt_temp : ns(8);
	reg data_in_ready : ns(1);
	
	reg image_counter : ns(4);
	sig image_counter_temp : ns(4);
	
	reg temp_left, temp_up, temp_right, temp_down : ns(11);
	sig temp_sum : ns(11);
	
	always {
		data_in_ready = upins == INS_START ? 1 : 0;
		ramidata = 0;
	}
	
	sfg init {
		ramcnt = 0;
		ramadr = 0;
		wr = 0;
		image_counter = image_counter + 1;
	}
	
	sfg calculate_left {
		ramadr = ramcnt % 10 == 0 ? ramcnt : ramcnt - 1;
		temp_left = ramcnt % 10 == 0 ? 0 : ramodata;
		wr = 0;
	}
		
	sfg calculate_top {
		ramadr = ramcnt < 10 ? ramcnt : ramcnt - 10;
		temp_up = ramcnt < 10 ? 0 : ramodata;
		wr = 0;
	}
	
	sfg calculate_right {
		ramadr = ramcnt % 10 == 9 ? ramcnt : ramcnt + 1;
		temp_right = ramcnt % 10 == 9 ? 0 : ramodata;
		wr = 0;
	}
		
	sfg calculate_down {
		ramadr = ramcnt >= 90 ? ramcnt : ramcnt + 10;
		temp_down = ramcnt >= 90 ? 0 : ramodata;
		wr = 0;
	}
	
	sfg calculate_and_display_mean {
		temp_sum = (temp_left + temp_up + temp_right + temp_down) >> 2;
		ramcnt_temp = ramcnt + 1;
		$display( "pixel ", $dec, ramcnt_temp, ": ", $dec, temp_sum );
		ramadr = 0;
		wr = 0;
	}
	
	sfg inc_ramcnt {
		ramcnt = ramcnt + 1;
		ramadr = 0;
		wr = 0;
	}
	
	sfg announce_disp {
		image_counter_temp = image_counter;
		$display( "------------------ Image ", $dec, image_counter_temp, " ----------------------" );
		$display( "          Original image: " );
		ramadr = 0;
		wr = 0;
	}
	
	sfg announce_blur { 
		$display( "          Blurred image: " );
	}
	
	sfg display_pixel {
		ramadr = ramcnt;
		ramcnt_temp = ramcnt + 1;
		wr = 0;
		$display( "pixel ", $dec, ramcnt_temp, ": ", ramodata );
		ramcnt = ramcnt + 1;
	}
	
	sfg announce_ready {
		upstatus = 1;
		ramadr = 0;
		wr = 0;
	}
	
	sfg reset_ramcnt {
		ramcnt = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg idle {
		ramadr = 0;
		wr = 0;
	}

}

fsm blur_ctl(blur) {

	initial s0;
	state	wait_for_in, algo_loop, get_left, get_top,
			get_right, get_down, output, next_pixel, disp_img;
	
	@s0 			(init) -> wait_for_in;
	
	@wait_for_in	if (data_in_ready) then (announce_disp) -> disp_img;
					else (idle) -> wait_for_in;
	
	@disp_img		if (ramcnt == 100) then (reset_ramcnt, announce_blur) -> algo_loop;
					else (display_pixel) -> disp_img;
	
	@algo_loop		if (ramcnt == 100) then (announce_ready) -> s0;
					else (idle) -> get_left;

	@get_left		(calculate_left) -> get_top;
	
	@get_top		(calculate_top) -> get_right;
	
	@get_right		(calculate_right) -> get_down;
	
	@get_down		(calculate_down) -> output;
	
	@output			(calculate_and_display_mean) -> next_pixel;
	
	@next_pixel		(inc_ramcnt) -> algo_loop;

}


system S {
	my8051;
	blur;
}

