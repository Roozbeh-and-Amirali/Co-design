
#define INS_IDLE 0
#define INS_START 1

ipblock my8051 {
	iptype "i8051system";
	ipparm "exec=blur.ihx";
	ipparm "verbose=1";
	ipparm "period=1";
}

ipblock my8051_ins(out data : ns(8)) {
	iptype "i8051systemsource";
	ipparm "core=my8051";
	ipparm "port=P0";
}

ipblock my8051_status(in data : ns(8)) {
	iptype "i8051systemsink";
	ipparm "core=my8051";
	ipparm "port=P1";
}

ipblock my8051_xram(in    idata    : ns(8);
                    out   odata    : ns(8);
                    in    address  : ns(8);
                    in    wr       : ns(8)) {
	iptype "i8051buffer";
	ipparm "core=my8051";
	ipparm "xbus=0x4000";
	ipparm "xrange=0x64"; // 100 locations at address 0x4000
}


dp blur {
	sig upins : ns(8);
	reg upstatus : ns(8);
	use my8051_ins (upins);
	use my8051_status (upstatus);
	
	sig ramadr, ramidata, ramodata : ns(8);
	sig wr : ns(1);
	use my8051_xram(ramidata, ramodata, ramadr, wr);
	
	reg ramcnt : ns(8);
	reg data_in_ready : ns(1);
	
	reg temp_left, temp_up, temp_right, temp_down : ns(9);
	sig temp_sum : ns(9);
	
	always {
		data_in_ready = upins == INS_START ? 1 : 0;
		ramidata = 0;
	}
	
	sfg init {
		// upstatus = 0;
		ramcnt = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg calculate_left_0 {
		ramadr = ramcnt % 10 == 0 ? ramcnt : ramcnt - 1;
		wr = 0;
		// upstatus = 0;
	}
	
	sfg calculate_left_1 {
		temp_left = ramcnt % 10 == 0 ? 0 : ramodata;
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg calculate_top_0 {
		ramadr = ramcnt < 10 ? ramcnt : ramcnt - 10;
		wr = 0;
		// upstatus = 0;
	}
	
	sfg calculate_top_1 {
		temp_up = ramcnt < 10 ? 0 : ramodata;
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg calculate_right_0 {
		ramadr = ramcnt % 10 == 9 ? ramcnt : ramcnt + 1;
		wr = 0;
		// upstatus = 0;
	}
	
	sfg calculate_right_1 {
		temp_right = ramcnt % 10 == 9 ? 0 : ramodata;
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg calculate_down_0 {
		ramadr = ramcnt >= 90 ? ramcnt : ramcnt + 10;
		wr = 0;
		// upstatus = 0;
	}
	
	sfg calculate_down_1 {
		temp_down = ramcnt >= 90 ? 0 : ramodata;
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg calculate_and_display_mean {
		// $display( "left: ", $dec, temp_left, " up: ", temp_up, " right: ", temp_right, " down: ", temp_down );
		temp_sum = (temp_left + temp_up + temp_right + temp_down) >> 2;
		$display( upstatus, "pixel ", $dec, ramcnt, ": ", $dec, temp_sum );
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg inc_ramcnt {
		ramcnt = ramcnt + 1;
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}
	
	sfg announce_ready {
		upstatus = 1;
		ramadr = 0;
		wr = 0;
	}
	
	sfg idle {
		// upstatus = 0;
		ramadr = 0;
		wr = 0;
	}

}

fsm blur_ctl(blur) {

	initial s0;
	state s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
	
	@s0 (init) -> s1;
	
	@s1	if (data_in_ready) then (idle) -> s2;
		else (idle) -> s1;
	
	@s2	if (ramcnt == 100) then (announce_ready) -> s0;
		else (idle) -> s3;

	@s3 (calculate_left_0) -> s4;
	
	@s4 (calculate_left_1) -> s5;
	
	@s5 (calculate_top_0) -> s6;
	
	@s6 (calculate_top_1) -> s7;
	
	@s7 (calculate_right_0) -> s8;
	
	@s8 (calculate_right_1) -> s9;
	
	@s9 (calculate_down_0) -> s10;
	
	@s10 (calculate_down_1) -> s11;
	
	@s11 (calculate_and_display_mean) -> s12;
	
	@s12 (inc_ramcnt) -> s2;

}


system S {
	my8051;
	blur;
}

